import asyncio
from datetime import time
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import BOT_TOKEN, logger
from handlers import (
    start, handle_message,
    send_puzzle_to_user, generate_random_wake_time,
    db
)
from database import Database

async def check_alarms(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
    alarms = db.get_active_alarms()

    current_time = datetime.now()
    current_date = current_time.date().isoformat()
    current_time_str = current_time.strftime("%H:%M")

    for user_id, time_start_str, time_end_str, random_wake_time, last_activation_date in alarms:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ò–õ–ò —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è
        if not random_wake_time or last_activation_date != current_date:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
            wake_time = generate_random_wake_time(time_start_str, time_end_str)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            db.update_alarm_wake_time(user_id, wake_time, current_date)
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –¥–ª—è {user_id}: {wake_time}")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –±—É–¥–∏—Ç—å
        if random_wake_time == current_time_str:
            # –ó–í–û–ù–ò–ú –ë–£–î–ò–õ–¨–ù–ò–ö!
            await context.bot.send_message(user_id, "üîî üîî üîî –ë–£–î–ò–õ–¨–ù–ò–ö! üîî üîî üîî")
            await asyncio.sleep(1)
            await context.bot.send_message(user_id, "‚è∞ –ü–†–û–°–´–ü–ê–ô–°–Ø! ‚è∞")
            await asyncio.sleep(1)
            await context.bot.send_message(user_id, "üåÖ –î–û–ë–†–û–ï –£–¢–†–û! üåÖ")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É
            await send_puzzle_to_user(user_id, context)

            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫ –¥–æ –∑–∞–≤—Ç—Ä–∞
            db.deactivate_alarm(user_id)
            logger.info(f"–ë—É–¥–∏–ª—å–Ω–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {user_id} –≤ {current_time_str}")

async def reset_daily_alarms(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:01 –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏"""
    db.reset_all_alarms()
    logger.info("–í—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application —Å job_queue
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    job_queue = application.job_queue

    if job_queue:
        job_queue.run_repeating(check_alarms, interval=60, first=10)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        job_queue.run_daily(reset_daily_alarms, time=time(0, 1), days=tuple(range(7)))  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã!")
    else:
        logger.warning("‚ö†Ô∏è Job queue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

    print("ü§ñ –ë–æ—Ç '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ' –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ò–¥–∏ –≤ Telegram –∏ –Ω–∞–ø–∏—à–∏ /start")

    application.run_polling()

if __name__ == "__main__":
    main()