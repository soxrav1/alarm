import asyncio
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes

from database import Database
from puzzles import get_random_puzzle, validate_answer
from keyboards import MAIN_KEYBOARD
from config import logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫
user_example_puzzles = {}

def generate_random_wake_time(start_str: str, end_str: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É start –∏ end"""
    start = datetime.strptime(start_str, "%H:%M")
    end = datetime.strptime(end_str, "%H:%M")

    # –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    total_minutes = int((end - start).total_seconds() / 60)
    random_minutes = random.randint(0, total_minutes)

    wake_time = start + timedelta(minutes=random_minutes)
    return wake_time.strftime("%H:%M")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db.save_user(user.id, user.first_name, user.username)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ' - —É–º–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ —Å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞–º–∏!",
        reply_markup=MAIN_KEYBOARD
    )

async def set_alarm_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
    await update.message.reply_text(
        "‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ß–ß:–ú–ú - –ß–ß:–ú–ú\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 7:00 - 7:30\n"
        "–Ø —Ä–∞–∑–±—É–∂—É —Ç–µ–±—è —Å–ª—É—á–∞–π–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ"
    )

async def handle_alarm_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
    try:
        text = update.message.text
        if " - " not in text:
            raise ValueError

        start_str, end_str = text.split(" - ")
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(start_str.strip(), "%H:%M")
        datetime.strptime(end_str.strip(), "%H:%M")

        db.set_alarm(user_id, start_str.strip(), end_str.strip())

        await update.message.reply_text(
            f"‚úÖ –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª {start_str} - {end_str}\n–ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤! üåô",
            reply_markup=MAIN_KEYBOARD
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú - –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 7:00 - 7:30"
        )

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    success, failed_first, failed_second = db.get_statistics(user_id)

    text = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥—ä–µ–º–æ–≤: {success}\n"
        f"‚ùå –ù–µ —Ä–µ—à–∏–ª –ø–µ—Ä–≤—É—é: {failed_first}\n"
        f"‚ùå –ù–µ —Ä–µ—à–∏–ª –≤—Ç–æ—Ä—É—é: {failed_second}\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    )

    await update.message.reply_text(text)

async def show_example_puzzle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏"""
    puzzle = get_random_puzzle()
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    user_example_puzzles[user_id] = {
        'question': puzzle['question'],
        'answer': puzzle['answer']
    }

    await update.message.reply_text(
        f"üß© –ü—Ä–∏–º–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏:\n\n{puzzle['question']}\n\n"
        f"–ü–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å! –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ –∑–¥–µ—Å—å:"
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "ü§ñ –Ø - —É–º–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ'!\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 7:00-7:30)\n"
        "2. –Ø —Ä–∞–∑–±—É–∂—É —Ç–µ–±—è —Å–ª—É—á–∞–π–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ\n"
        "3. –†–µ—à–∏ –ø–µ—Ä–≤—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∑–∞ 10 –º–∏–Ω—É—Ç\n"
        "4. –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç —Ä–µ—à–∏ –≤—Ç–æ—Ä—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∑–∞ 7 –º–∏–Ω—É—Ç\n"
        "5. –ü–æ–ª—É—á–∏ —Å—Ç–∞—Ç—É—Å '–£—Å–ø–µ—à–Ω—ã–π –ø–æ–¥—ä–µ–º'! ‚úÖ\n\n"
        "–ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫'!"
    )
    await update.message.reply_text(help_text)

async def handle_puzzle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É"""
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if validate_answer(user_answer, user_state['current_puzzle_answer']):
        if user_state['state'] == 'AWAITING_FIRST_PUZZLE':
            db.set_user_state(user_id, 'AWAITING_SECOND_PUZZLE')
            await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ! –ñ–¥–∏ –≤—Ç–æ—Ä—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç!")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
            asyncio.create_task(send_delayed_second_puzzle(user_id, context))

        else:  # AWAITING_SECOND_RESPONSE
            db.set_user_state(user_id, 'SLEEP')
            db.add_statistics(user_id, 'success')
            await update.message.reply_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû",
                                            reply_markup=MAIN_KEYBOARD)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

async def handle_example_puzzle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏"""
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    puzzle_data = user_example_puzzles.get(user_id)

    if not puzzle_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if validate_answer(user_answer, puzzle_data['answer']):
        await update.message.reply_text(
            "‚úÖ –í–µ—Ä–Ω–æ! –¢–∞–∫ —è –±—É–¥—É –±—É–¥–∏—Ç—å —Ç–µ–±—è –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ!",
            reply_markup=MAIN_KEYBOARD
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {puzzle_data['answer']}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üß© –ü—Ä–∏–º–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏'",
            reply_markup=MAIN_KEYBOARD
        )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if user_id in user_example_puzzles:
        del user_example_puzzles[user_id]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ—à–∞–µ—Ç –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É)
    user_state = db.get_user_state(user_id)
    if user_state and user_state['state'] in ['AWAITING_FIRST_PUZZLE', 'AWAITING_SECOND_RESPONSE']:
        await handle_puzzle_answer(update, context, user_state)
        return

    # –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏
    if user_id in user_example_puzzles:
        await handle_example_puzzle_answer(update, context)
        return

    # –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –∫–Ω–æ–ø–æ–∫
    if text == "üïê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫":
        await set_alarm_start(update, context)
    elif text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics(update, context)
    elif text == "üß© –ü—Ä–∏–º–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏":
        await show_example_puzzle(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await show_help(update, context)
    elif " - " in text:
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ñ–∏—Å - –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫
        await handle_alarm_setup(update, context)
    else:
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëÜ\n–ò–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 7:00 - 7:30",
            reply_markup=MAIN_KEYBOARD
        )

async def send_puzzle_to_user(user_id: int, context: ContextTypes.DEFAULT_TYPE, is_second=False):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    puzzle = get_random_puzzle()

    db.set_user_state(
        user_id,
        'AWAITING_SECOND_RESPONSE' if is_second else 'AWAITING_FIRST_PUZZLE',
        puzzle['question'],
        puzzle['answer']
    )

    message_text = (
        f"–¢—É–∫-—Ç—É–∫! üö™\n–¢—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è —Ç–æ—á–Ω–æ???\n–î–æ–∫–∞–∂–∏! –†–µ—à–∏:\n\n{puzzle['question']}"
        if is_second else
        f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è\n–ü–æ—Ä–∞ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è! –†–µ—à–∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É:\n\n{puzzle['question']}"
    )

    await context.bot.send_message(user_id, message_text)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    from config import FIRST_PUZZLE_TIMEOUT, SECOND_PUZZLE_TIMEOUT
    timeout = SECOND_PUZZLE_TIMEOUT if is_second else FIRST_PUZZLE_TIMEOUT
    asyncio.create_task(puzzle_timeout(user_id, context, is_second, timeout))

async def puzzle_timeout(user_id: int, context: ContextTypes.DEFAULT_TYPE, is_second: bool, timeout: int):
    """–¢–∞–π–º–∞—É—Ç –¥–ª—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏"""
    await asyncio.sleep(timeout)

    user_state = db.get_user_state(user_id)
    if user_state and user_state['state'] == ('AWAITING_SECOND_RESPONSE' if is_second else 'AWAITING_FIRST_PUZZLE'):
        status = 'failed_second' if is_second else 'failed_first'
        db.add_statistics(user_id, status)
        db.set_user_state(user_id, 'SLEEP')

        message = (
            "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–¥—ä–µ–º –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω üòî"
            if is_second else
            "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –≤–æ–≤—Ä–µ–º—è üòî"
        )
        await context.bot.send_message(user_id, message, reply_markup=MAIN_KEYBOARD)

async def send_delayed_second_puzzle(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
    from config import DELAY_BETWEEN_PUZZLES
    await asyncio.sleep(DELAY_BETWEEN_PUZZLES)
    await send_puzzle_to_user(user_id, context, is_second=True)